generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextIndex", "fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  full_name     String    @default("")
  phone_number  String    @default("")
  gender        String    @default("")
  age           String    @default("")
  city          String    @default("")
  accounts      Account[]
  sessions      Session[]
  voteLog       voteLog[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model standings {
  id           BigInt @id @default(autoincrement())
  driver       String @unique @default("")
  fan_votes    Int
  image        String @default("")
  actual_votes Int    @default(0)
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model voteLog {
  id           BigInt   @id(map: "vote_log_pkey") @default(autoincrement())
  created_at   DateTime @default(now()) @db.Timestamptz(6)
  email        String
  driver_vote  String   @unique(map: "vote_log_driver_vote_key")
  is_valid     Boolean  @default(true)
  phone_number String   @default("")
  User         User     @relation(fields: [email], references: [email], onDelete: NoAction, onUpdate: NoAction)
}
